# plug bootstrap
evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}
plug "andreyorst/plug.kak" noload

#
# editor
# 
    
# clipboard
plug "lePerdu/kakboard" %{
    hook global WinCreate .* %{ kakboard-enable }
}

# tab
plug "andreyorst/smarttab.kak" defer smarttab %{
    set-option global softtabstop 4
    set-option global indentwidth 4
} config %{
    hook global WinSetOption filetype=(makefile) noexpandtab
    hook global BufOpenFile .* expandtab
    hook global BufNewFile  .* expandtab
}

# auto pairs
plug "alexherbo2/auto-pairs.kak" config %{
    hook global BufOpenFile .* enable-auto-pairs
    hook global BufNewFile .* enable-auto-pairs
}

# others
set-option global autowrap_column 80
map global normal = '|fmt -w $kak_opt_autowrap_column<ret>'
set-option global makecmd ''
set-option global grepcmd 'rg --hidden --glob !.git/* --no-heading --line-number'

#
# ui
#

add-highlighter global/ number-lines -relative
add-highlighter global/ column 80 default,black
add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+rb
add-highlighter global/ show-matching

set-face global comment cyan+bi
set-face global LineNumbers cyan
set-face global BufferPadding cyan
set-face global PrimaryCursor default+r
set-option global scrolloff 10,10

set-option global ui_options terminal_assistant=cat

# better highlight in compile buffer when using cargo
add-highlighter shared/CompileHighlighsOk regex \b(Compiling|Finished|Running|ok|Doc-tests) 0:green+b
add-highlighter shared/CompileHighlighsErr regex \b(FAILED|error) 0:red+b
hook global WinSetOption filetype=make %{
    add-highlighter window/CompileHighlighsOk ref CompileHighlighsOk
    add-highlighter window/CompileHighlighsErr ref CompileHighlighsErr
    hook -once -always window WinSetOption filetype=.* %{ remove-highlighter window/CompileHighlighsOk }
    hook -once -always window WinSetOption filetype=.* %{ remove-highlighter window/CompileHighlighsErr }
}

#
# git
# 
plug "chambln/kakoune-kit" config %{
    declare-user-mode commit
    declare-user-mode push-pull
    hook global WinDisplay "\*git\*" %{
        git status
    }
    hook global WinSetOption filetype=git-status %{

        map window -docstring 'Straight-forward' commit c ':git commit --verbose<ret>'
        map window -docstring 'Amend' commit a ':git commit --amend<ret>'
        map window normal -docstring 'Commit' c ':enter-user-mode commit<ret>'

        map window -docstring 'Push' push-pull P ':echo %sh{git push} ; git status<ret>'
        map window -docstring 'Force push' push-pull F ':echo %sh{git push --force} ; git status<ret>'
        map window -docstring 'Pull' push-pull p ':echo %sh{git pull} ; git status<ret>'
        map window -docstring 'Force pull' push-pull f ':echo %sh{git pull --force} ; git status<ret>'
        map window normal -docstring 'Push/Pull' p ':enter-user-mode push-pull<ret>'

        map window normal P ":<esc>"
        map window normal i ":<esc>"
        map window normal j "jgh"
        map window normal k "kgh"
        map window normal l ': git log --oneline --graph<ret>'
        map window normal S ': git add . ; git status<ret>'
        map window normal d ': git diff<ret>'
        map window normal D ': git diff --staged<ret>'
        map window normal s 'wwwGl: git add %val{selections} ; git status<ret>'
        map window normal a 'wGl: git add %val{selections} ; git status<ret>'
        map window normal u 'wwwGl: echo %sh{git restore --staged $kak_selections} ; git status<ret>'
        map window normal x 'wwwGl: echo %sh{git restore $kak_selections} ; git status<ret>'
        map window normal <ret> 'wwwGlgf'

        map window normal q ': db<ret>'
    }
    hook global WinSetOption filetype=git-log %{
        map window normal d     'ww: git diff %val{selections}<ret>'
        map window normal <ret> 'ww: git show %val{selections}<ret>'
        map window normal R     'ww: git reset %val{selections}'
        map window normal o     'ww: git checkout %val{selections}'
        map window normal r     'ww: terminal git revert %val{selections}'
    }
}

#
# keybinds and commands
#

map global normal <tab> ":bn<ret>"
map global normal <s-tab> ":bp<ret>"

declare-user-mode cmd
map global -docstring "Open a terminal" cmd <ret> ":terminal zsh<ret>"
map global -docstring "Compile" cmd b ":make <up>"
map global -docstring "Check compilation log" cmd t ":buffer *make*<ret>"
map global -docstring "Open a new window" cmd w ":new<ret>"
map global -docstring "Open Git status" cmd g ":git status<ret>"
map global normal <space> ":enter-user-mode cmd<ret>"

declare-user-mode term
map global -docstring "Python" term p ":terminal python<ret>"
map global -docstring "Lua" term l ":terminal lua<ret>"
map global -docstring "Haskell" term h ":terminal ghci<ret>"
map global -docstring "JavaScript" term j ":terminal nodejs<ret>"
map global -docstring "Open a repl" cmd c ":enter-user-mode term<ret>"
